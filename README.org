#+title: Cities of Transistors
#+author: Elam Day-Friedland

This project seeks to explore shared notions of movement and information between macro-level architecture (urban planning) and the microarchitecture of the massively parallel processors that feed ever-growing demand for compute resources.
Of particular interest are the following architectural motifs:
a lack of verticality / a pervasive 'flatness',
highly regular/structured layout,
and hierarchical communication/movements channels.

* GPU Background

A GPU (graphics processing unit) is a large array of small procesing units that perform operations in parallel.
The processing units communicate to synchronoize and share results,
but communication (moving information across the physical chip) is expensive (time, energy) compared to keeping it within the individual units so it is minimized.

Here are some characteristics of GPUs that may be fruitful to explore in relation to American suburbs:

* Lack of Verticality
In compute chips,
transistors are (for now) laid out in a single 2D layer.
This forces long interconnecting roads/busses that remain underutilized most of the time,
aside from communication phases when they're backed up.

* Highly Regular Layout
When all units are optimized to do ~the same thing (it's easier to organize a homogenous array of compute units than 100 specialized ones),
there is little space for uniqueness.

The demand for easy parallelism necessitates sprawling repition.

* Hierarchical Communication Channels
As a result of the sprawling 2D array of compute units,
hierarchical transportation channels (garage/cul-de-sac < local road < main road < highway) must exist.

Transportation channels may be hierarchical,
but everything is very regular + homogenous.

* working
We could define a 'suburban' processor architecture,
with architecture diagrams and rtl/layout?

Present along a darpa/nsf grant application

What parallels do we want to draw?
- economic motivation:
  certain resources (land/area) are cheaper than others (density)
- ease of design / 'programming'
homogenous fabric is nominally easier to reason about
- performance goals
  maximize throughput by minimizing communication
